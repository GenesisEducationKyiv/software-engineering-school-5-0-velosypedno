version: '3'

includes:
  docker: ./taskfile.docker.yml
  gw: 
    taskfile: ./gateway/taskfile.yml
    dir: ./gateway
  weath: 
    taskfile: ./weather/taskfile.yml
    dir: ./weather
  sub: 
    taskfile: ./sub/taskfile.yml
    dir: ./sub

tasks:
  default:
    desc: List available tasks
    cmds:
      - go-task --list-all

  copy:hooks:pre-commit:
    desc: Setup pre-commit hook
    cmds:
      - cp githooks/pre-commit .git/hooks/pre-commit
      - chmod +x .git/hooks/pre-commit

  rm:hooks:pre-commit:
    desc: Remove pre-commit hook
    cmds:
      - rm -f .git/hooks/pre-commit

  copy:env:
    desc: Copy default env vars
    cmds:
      - cp .env.sample .env
    silent: false

  lint:
    desc: Run local linter config 
    cmds:
      - golangci-lint run
    
  lint:remote:
    desc: Run local linter config 
    cmds:
      - golangci-lint run --config <(curl -sSfL https://raw.githubusercontent.com/fabl3ss/genesis-se-school-linter/refs/heads/main/.golangci.yaml)

  install:
    desc: Install dependencies
    cmds:
      - task: install:linter
      - task: install:migrator

  install:linter:
    desc: Install linter
    cmds:
      - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.6

  test:
    desc: Run all tests
    cmds:
      - task: gw:test
      - task: weath:test
      - task: sub:test
  
  test:unit:
    desc: Run unit tests
    cmds:
      - task: gw:test:unit
      - task: weath:test:unit
      - task: sub:test:unit

  test:integration:
    desc: Run integration tests
    dotenv: [".env.sample"]
    cmds:
      - task: gw:test:integration
      - task: weath:test:integration
      - task: sub:test:integration

  copy:env:optional:
     desc: Ensure .env exists
     cmds:
      - |
        if [ ! -f .env ]; then
          echo ".env not found, copying from .env.sample"
          cp .env.sample .env
        else
          echo ".env already exists"
        fi
        
  protoc:
    desc: Generate proto files
    cmds:
      - |
        protoc --go_out=. --go_opt=paths=source_relative \
          --go-grpc_out=. --go-grpc_opt=paths=source_relative \
          {{.PATH}}
    requires:
      vars: [PATH]