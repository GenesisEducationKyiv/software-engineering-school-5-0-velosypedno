version: '3'

includes:
  docker: ./Taskfile.docker.yml

tasks:
  default:
    desc: List available tasks
    cmds:
      - go-task --list-all

  copy:hooks:pre-commit:
    desc: Setup pre-commit hook
    cmds:
      - cp githooks/pre-commit .git/hooks/pre-commit
      - chmod +x .git/hooks/pre-commit

  rm:hooks:pre-commit:
    desc: Remove pre-commit hook
    cmds:
      - rm -f .git/hooks/pre-commit

  copy:env:
    desc: Copy default env vars
    cmds:
      - cp .env.sample .env
    silent: false
    
  lint:
    desc: Run local linter config 
    cmds:
      - golangci-lint run --config <(curl -sSfL https://raw.githubusercontent.com/fabl3ss/genesis-se-school-linter/refs/heads/main/.golangci.yaml)

  install:
    desc: Install dependencies
    cmds:
      - task: install:linter
      - task: install:migrator

  install:linter:
    desc: Install linter
    cmds:
      - go install github.com/golangci/golangci-lint/v2/cmd/golangci-lint@v2.1.6

  install:migrator:
    desc: Install migrator
    cmds:
      - go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@v4.16.2

  test:
    desc: Run all tests
    cmds:
      - task: test:unit
      - task: test:integration
  
  test:unit:
    desc: Run unit tests
    cmds:
      - go test ./... -v -tags=unit

  test:integration:
    desc: Run integration tests
    dotenv: [".env.sample"]
    env:
      API_PORT: 8081
      DB_PORT: 5433
      REDIS_PORT: 6380
      SMTP_PORT: 1025
      DB_HOST: localhost
      SMTP_HOST: localhost
      REDIS_HOST: localhost
      EMAIL_FROM: testuser@example.com
      TEMPLATES_DIR: ../../internal/templates
    cmds:
      - task: copy:env:optional
      - docker compose -f docker-compose.test.yml up -d
      - defer: docker compose -f docker-compose.test.yml down
      - migrate -database "${DB_DRIVER}://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable" -path db/migrations up
      - go test ./... -v -tags=integration



  migrate:up:
    desc: Run migrations
    cmds:
      - migrate -database "${DB_DRIVER}://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}?sslmode=disable" -path db/migrations up
    
  api:run:debug:
    desc: Run API in debug mode
    dotenv: [".env"]
    env:
      DB_HOST: localhost
      REDIS_HOST: localhost
    cmds:
      - go run cmd/api/main.go

  copy:env:optional:
     desc: Ensure .env exists
     cmds:
      - |
        if [ ! -f .env ]; then
          echo ".env not found, copying from .env.sample"
          cp .env.sample .env
        else
          echo ".env already exists"
        fi