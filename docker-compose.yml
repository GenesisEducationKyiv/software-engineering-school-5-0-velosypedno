x-db-env: &db-env
  DB_USER: ${DB_USER}
  DB_PASSWORD: ${DB_PASSWORD}
  DB_NAME: ${DB_NAME}
  DB_HOST: ${DB_HOST}
  DB_PORT: ${DB_PORT}
  DB_DRIVER: ${DB_DRIVER} 

x-rabbitmq-env: &rabbitmq-env
  RABBITMQ_USER: ${RABBITMQ_USER}
  RABBITMQ_PASSWORD: ${RABBITMQ_PASSWORD}
  RABBITMQ_HOST: ${RABBITMQ_HOST}
  RABBITMQ_PORT: ${RABBITMQ_PORT}

x-smtp-env: &smtp-env
  SMTP_HOST: ${SMTP_HOST}
  SMTP_PORT: ${SMTP_PORT}
  SMTP_USER: ${SMTP_USER}
  SMTP_PASS: ${SMTP_PASS}
  EMAIL_FROM: ${EMAIL_FROM}

x-redis-env: &redis-env
  REDIS_HOST: ${REDIS_HOST}
  REDIS_PORT: ${REDIS_PORT}
  REDIS_PASSWORD: ${REDIS_PASSWORD}

x-gateway-env: &gateway-env
  WEATHER_SERVICE_PORT: ${WEATHER_SERVICE_GRPC_PORT}
  WEATHER_SERVICE_HOST: ${WEATHER_SERVICE_HOST}
  SUB_SERVICE_PORT: ${SUB_SERVICE_PORT}
  SUB_SERVICE_HOST: ${SUB_SERVICE_HOST}
  API_GATEWAY_PORT: ${API_GATEWAY_PORT}
  GIN_MODE: ${GIN_MODE}
  LOG_DIR: ${LOG_DIR}

x-sub-env: &sub-env
  GRPC_PORT: ${SUB_SERVICE_PORT}
  GRPC_HOST: ${SUB_SERVICE_HOST}
  WEATHER_SERVICE_PORT: ${WEATHER_SERVICE_GRPC_PORT}
  WEATHER_SERVICE_HOST: ${WEATHER_SERVICE_HOST}
  GIN_MODE: ${GIN_MODE}
  LOG_DIR: ${LOG_DIR}

x-notifier-env: &notifier-env
  TEMPLATES_DIR: ${TEMPLATES_DIR}
  HTTP_PORT: ${NOTIFIER_PORT}
  GIN_MODE: ${GIN_MODE}
  LOG_DIR: ${LOG_DIR}

x-weather-env: &weather-env
  GRPC_HOST: ${WEATHER_SERVICE_HOST}
  GRPC_PORT: ${WEATHER_SERVICE_GRPC_PORT}
  HTTP_HOST: ${WEATHER_SERVICE_HOST}
  HTTP_PORT: ${WEATHER_SERVICE_HTTP_PORT}
  GIN_MODE: ${GIN_MODE}
  LOG_DIR: ${LOG_DIR}

  FREE_WEATHER_API_KEY: ${FREE_WEATHER_API_KEY}
  WEATHER_API_BASE_URL: ${WEATHER_API_BASE_URL}

  TOMORROW_WEATHER_API_KEY: ${TOMORROW_WEATHER_API_KEY}
  TOMORROW_API_BASE_URL: ${TOMORROW_API_BASE_URL}

  VISUAL_CROSSING_API_KEY: ${VISUAL_CROSSING_API_KEY}
  VISUAL_CROSSING_API_BASE_URL: ${VISUAL_CROSSING_API_BASE_URL}

services:
  postgres:
    image: postgres:17.5
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data     
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 4
    restart: unless-stopped
  
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli", "ping"]
      interval: 2s
      timeout: 2s
      retries: 4
  migrator:
    build: 
      context: .
      dockerfile: sub/Dockerfile
    environment:
      <<: *db-env
    depends_on:
      postgres:
        condition: service_healthy
    entrypoint: ["task", "migrate:up"]
    restart: "no"

  sub:
    build: 
      context: .
      dockerfile: sub/Dockerfile
    ports:
      - "50100:50100"
    environment:
      <<: [*db-env, *smtp-env, *sub-env, *rabbitmq-env]
    depends_on:
      migrator:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
      notifier:
        condition: service_healthy
    entrypoint: ["/app/bin/sub"]
    restart: unless-stopped
    volumes:
      - ./sub/logs:${LOG_DIR}

  weather:
    build:
      context: .
      dockerfile: weather/Dockerfile
    ports:
      - "8084:8084"
      - "50101:50101"
    environment:
      <<: [*weather-env, *redis-env]
    depends_on:
      redis:
        condition: service_healthy
    entrypoint: ["/app/bin/weather"]
    restart: unless-stopped
    volumes:
      - ./weather/logs:${LOG_DIR}

  gateway:
    build: 
      context: .
      dockerfile: gateway/Dockerfile
    ports:
      - "8080:8082"
    environment:
      <<: [*gateway-env]
    entrypoint: ["/app/bin/gateway"]
    restart: unless-stopped
    depends_on:
     - sub
    volumes:
      - ./gateway/logs:${LOG_DIR}

  notifier:
    build: 
      context: .
      dockerfile: notifier/Dockerfile
    ports:
      - "8088:8088"
    environment:
      <<: [*smtp-env, *rabbitmq-env, *notifier-env]
    entrypoint: ["/app/bin/notifier"]
    restart: unless-stopped
    depends_on:
      rabbitmq:
        condition: service_healthy
    volumes:
      - ./notifier/logs:${LOG_DIR}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://127.0.0.1:8088/healthcheck"]
      interval: 10s
      timeout: 10s
      retries: 5
  
  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3.13-management
    restart: always
    ports:
      - "${RABBITMQ_PORT}:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_port_connectivity"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    volumes:
      - grafana-data:/var/lib/grafana
    restart: unless-stopped

volumes:
  postgres-data:
  prometheus-data:
  rabbitmq-data:
  grafana-data: