x-db-env: &db-env
  DB_USER: ${DB_USER}
  DB_PASSWORD: ${DB_PASSWORD}
  DB_NAME: ${DB_NAME}
  DB_HOST: ${DB_HOST}
  DB_PORT: ${DB_PORT}
  DB_DRIVER: ${DB_DRIVER} 

x-smtp-env: &smtp-env
  SMTP_HOST: ${SMTP_HOST}
  SMTP_PORT: ${SMTP_PORT}
  SMTP_USER: ${SMTP_USER}
  SMTP_PASS: ${SMTP_PASS}
  EMAIL_FROM: ${EMAIL_FROM}

services:
  postgres-weather:
    image: postgres:latest
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data     
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 2s
      timeout: 2s
      retries: 4
    restart: unless-stopped

  migrator:
    build: .
    environment:
      <<: *db-env
    depends_on:
      postgres-weather:
        condition: service_healthy
    entrypoint: ["task", "migrate-up"]
    restart: "no"
  api-weather:
    build: .
    ports:
      - "8080:8080"
    environment:
      <<: [*db-env, *smtp-env]
      PORT: ${PORT}
      WEATHER_API_KEY: ${WEATHER_API_KEY}
    depends_on:
      migrator:
        condition: service_completed_successfully
    entrypoint: ["/app/bin/api"]
    restart: unless-stopped

  cron-weather:
    build: .
    environment:
      <<: [*db-env, *smtp-env]
      WEATHER_API_KEY: ${WEATHER_API_KEY}
    depends_on:
      migrator:
        condition: service_completed_successfully
    entrypoint: ["/app/bin/cron"]
    restart: unless-stopped
  
volumes:
  postgres-data: